# -*- coding: utf-8 -*-
"""1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0Cg079XtciIIB1NKesGSU-uGbnCB-Nw
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Load your dataset
# Assuming your file is named "genes_dataset.csv"
df = pd.read_csv("drive/MyDrive/Gene/sfari_genes.csv")

# Select relevant columns
df = df[['gene-symbol', 'syndromic']]

# Encode 'syndromic' column to 0 and 1
le = LabelEncoder()
df['syndromic'] = le.fit_transform(df['syndromic'])

# One-hot encode 'gene-symbol' column
onehot_encoder = OneHotEncoder(sparse=False)
gene_symbols_encoded = onehot_encoder.fit_transform(df[['gene-symbol']])
gene_symbols_encoded_df = pd.DataFrame(gene_symbols_encoded, columns=[f'gene_{i}' for i in range(gene_symbols_encoded.shape[1])])
df = pd.concat([df, gene_symbols_encoded_df], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['gene-symbol'], df['syndromic'], test_size=0.2, random_state=42)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Load your dataset
# Assuming your file is named "genes_dataset.csv"
df = pd.read_csv("drive/MyDrive/Gene/sfari_genes.csv")

# Select relevant columns
df = df[['gene-symbol', 'syndromic']]

# Encode 'syndromic' column to 0 and 1
le = LabelEncoder()
df['syndromic'] = le.fit_transform(df['syndromic'])

# One-hot encode 'gene-symbol' column
onehot_encoder = OneHotEncoder(sparse=False)
gene_symbols_encoded = onehot_encoder.fit_transform(df[['gene-symbol']])
gene_symbols_encoded_df = pd.DataFrame(gene_symbols_encoded, columns=[f'gene_{i}' for i in range(gene_symbols_encoded.shape[1])])
df = pd.concat([df, gene_symbols_encoded_df], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop(['gene-symbol', 'syndromic'], axis=1), df['syndromic'], test_size=0.2, random_state=42)

# Initialize classifiers
rf_classifier = RandomForestClassifier()
gb_classifier = GradientBoostingClassifier()
svm_classifier = SVC()

# Train models
rf_classifier.fit(X_train, y_train)
gb_classifier.fit(X_train, y_train)
svm_classifier.fit(X_train, y_train)

# Make predictions
rf_predictions = rf_classifier.predict(X_test)
gb_predictions = gb_classifier.predict(X_test)
svm_predictions = svm_classifier.predict(X_test)

# Evaluate models
print("Random Forest Classification Report:")
print(classification_report(y_test, rf_predictions))

print("\nGradient Boosting Classification Report:")
print(classification_report(y_test, gb_predictions))

print("\nSupport Vector Machine Classification Report:")
print(classification_report(y_test, svm_predictions))

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.preprocessing import LabelEncoder, OneHotEncoder
# 
# # Load your dataset
# # Assuming your file is named "genes_dataset.csv"
# df = pd.read_csv("genes_dataset.csv")
# 
# # Select relevant columns
# df = df[['gene-symbol', 'syndromic']]
# 
# # Encode 'syndromic' column to 0 and 1
# le = LabelEncoder()
# df['syndromic'] = le.fit_transform(df['syndromic'])
# 
# # One-hot encode 'gene-symbol' column
# onehot_encoder = OneHotEncoder(sparse=False)
# gene_symbols_encoded = onehot_encoder.fit_transform(df[['gene-symbol']])
# gene_symbols_encoded_df = pd.DataFrame(gene_symbols_encoded, columns=[f'gene_{i}' for i in range(gene_symbols_encoded.shape[1])])
# df = pd.concat([df, gene_symbols_encoded_df], axis=1)
# 
# # Train a simple model (you can use your trained model here)
# model = RandomForestClassifier()
# model.fit(df.drop(['gene-symbol', 'syndromic'], axis=1), df['syndromic'])
# 
# # Create Streamlit app
# st.title("Gene Classification Web App")
# 
# # User input for gene symbol
# gene_symbol = st.text_input("Enter Gene Symbol:")
# 
# # Make prediction
# if st.button("Predict"):
#     encoded_symbol = onehot_encoder.transform([[gene_symbol]])
#     prediction = model.predict(encoded_symbol)
#     result = " the gene has sign of Autism" if prediction[0] == 1 else "the gene has no sign of autism"
#     st.write(f"Prediction: {result}")
#